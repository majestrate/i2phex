Content-Type: text/html

<html><head><title>Gnutella Developer Forum: Hash/URN Gnutella Extensions (HUGE) v0.94</title>
<meta http-equiv="Expires" content="Tue, 30 Apr 2002 20:14:19 +0000">

</head>
<body bgcolor="#ffffff" text="#000000" alink="#000000" vlink="#666666" link="#990000">
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<table width="66%" border="0" cellpadding="0" cellspacing="0"><tr><td><table width="100%" border="0" cellpadding="2" cellspacing="1">
<tr valign="top"><td width="33%" bgcolor="#666666" class="header">Gnutella Developer Forum</td><td width="33%" bgcolor="#666666" class="header">G. Mohr</td></tr>
<tr valign="top"><td width="33%" bgcolor="#666666" class="header">&nbsp;</td><td width="33%" bgcolor="#666666" class="header">Bitzi, Inc.</td></tr>
<tr valign="top"><td width="33%" bgcolor="#666666" class="header">&nbsp;</td><td width="33%" bgcolor="#666666" class="header">April 30, 2002</td></tr>
</table></td></tr></table>
<div align="right"><font face="monaco, MS Sans Serif" color="#990000" size="+3"><b><br><span class="title">Hash/URN Gnutella Extensions (HUGE) v0.94</span></b></font></div>
<font face="verdana, helvetica, arial, sans-serif" size="2">

<h3>Abstract</h3>

<p>HUGE is a collection of incremental extensions to the 
Gnutella protocol (v 0.4) which allow files to be identified and 
located by Uniform Resource Names (URNs) -- reliable, persistent, 
location-independent names, such as those provided by secure 
hash values.
</p><a name="toc"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<h3>Table of Contents</h3>
<ul compact class="toc">
<b><a href="#anchor1">1.</a>&nbsp;
HUGE in a Nutshell<br></b>
<b><a href="#anchor2">2.</a>&nbsp;
Background<br></b>
<b><a href="#anchor3">2.1</a>&nbsp;
Motivation and Goals<br></b>
<b><a href="#anchor4">2.2</a>&nbsp;
Status of this Document<br></b>
<b><a href="#hash_and_urn_conventions">2.3</a>&nbsp;
Hash and URN Conventions<br></b>
<b><a href="#anchor5">2.4</a>&nbsp;
Gnutella Version<br></b>
<b><a href="#huge_gem">3.</a>&nbsp;
HUGE General Extension Mechanism (GEM)<br></b>
<b><a href="#query_extensions">4.</a>&nbsp;
Query Extensions<br></b>
<b><a href="#queryhit_extensions">5.</a>&nbsp;
QueryHit Extensions<br></b>
<b><a href="#download_extensions">6.</a>&nbsp;
Download Extensions<br></b>
<b><a href="#request-uri">6.1</a>&nbsp;
URN-based Request-URI<br></b>
<b><a href="#anchor6">6.2</a>&nbsp;
Headers<br></b>
<b><a href="#anchor7">6.2.1</a>&nbsp;
X-Gnutella-Content-URN<br></b>
<b><a href="#x_gnutella_alternate_location">6.2.2</a>&nbsp;
X-Gnutella-Alternate-Location<br></b>
<b><a href="#anchor8">7.</a>&nbsp;
Implementation Recommendations<br></b>
<b><a href="#huge_in_ggep">8.</a>&nbsp;
Experimental: HUGE in GGEP<br></b>
<b><a href="#anchor9">9.</a>&nbsp;
Acknowledgements<br></b>
<b><a href="#rfc.references1">&#167;</a>&nbsp;
References<br></b>
<b><a href="#rfc.authors">&#167;</a>&nbsp;
Author's Address<br></b>
</ul>
<br clear="all">

<a name="anchor1"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.1"></a><h3>1.&nbsp;HUGE in a Nutshell</h3>

<p>If you would like to receive URNs, such as hashes, reported 
on the hits for any other Query, insert a null-terminated string 
indicating the prefix of the kind(s) of URNs you'd like to receive 
after the first null, within the Query payload. For example:
</p></font><pre>
  QUERY:
    STD-HEADER: 
     [23 bytes]
    QUERY-SEARCH-STRING: 
     Gnutella Protocol[0x00]urn:[0x00]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Meaning: "Find files with the keywords 'Gnutella 
Protocol', and if possible, label the results with any
'urn:' identifiers available."
</p>
<p>If you would like to Query for files by hash value, leave the
standard search-string empty, and insert a valid URN between-the-nulls. 
For example:
</p></font><pre>
  QUERY:
    STD-HEADER:
     [23 bytes]
    QUERY-SEARCH-STRING:
     [0x00]urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB[0x00]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Meaning: "Find files with exactly this SHA1 hash." (In the case
of the SHA1 URN type, that is 20 raw bytes, Base32-encoded.)
</p>
<p>When you receive a QueryHit that requests URNs, or if you 
choose to always include URNs, report them by inserting the valid 
URN between the two nulls which mark the end of each distinct result. 
For example:
</p></font><pre>
  QUERYHIT:
    STD-HEADER:
     [23 bytes] 
    QUERY-HIT-HEADER:
     [11 bytes]
    EACH-RESULT:
     INDEX:    
      [4 bytes]
     LEN:
      [4 bytes]
     FILENAME:
      GnutellaProtocol04.pdf[0x00]
     EXTRA:
      urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB[0x00]
    SERVENT-IDENTIFIER:
    [16 bytes]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Meaning: "Here's a file which matches your Query, 
and here also is its SHA1 hash."
</p>
<p>If you return such an URN, you must also accept it in
an HTTP file-request, in accordance with the following Request-URI
syntax:
</p></font><pre>
  GET /uri-res/N2R?urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB HTTP/1.0
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>This syntax is in addition to, not in place of, the 
traditional file-index/filename based GET convention.
</p>
<p>To be in compliance with this specification, you should support 
at least the SHA1 hash algorithm and format reflected here, and be
able to downconvert the related "bitprint" format in requests and 
reports to SHA1. Other URN namespaces are optional and should be 
gracefully ignored if not understood. Please refer to the rest of this 
document for other important details.
</p>
<a name="anchor2"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.2"></a><h3>2.&nbsp;Background</h3>

<a name="rfc.section.2.1"></a><h4><a name="anchor3">2.1</a>&nbsp;Motivation and Goals</h4>

<p>By enabling the GnutellaNet to identify and locate files
by hash/URN, a number of features could be offered with the 
potential to greatly enhance end-user experience. These 
include:


<ul class="text">
<li>Folding together the display of query results which 
    represent the exact same file -- even if those 
    identical files have different filenames.
</li>
<li>Parallel downloading from multiple sources ("swarming")
    with final assurance that the complete file assembled 
    matches the remote source files.
</li>
<li>Safe "resume from alternate location" functionality, 
    again with final assurance of file integrity.
</li>
<li>Cross-indexing GnutellaNet content against external 
    catalogs (e.g. Bitzi) or foreign P2P systems (e.g. 
    FastTrack, EDonkey2000, OpenCola, MojoNation, 
    Freenet, etc.)
</li>
</ul><p>
</p>
<p>The goal of these extensions, termed the "Hash/URN Gnutella
Extensions" ("HUGE"), is to enable cooperating servents to identify 
and search for files by hash or other URN. This is to be done in a 
way that does not interfere with the operation of older servents, 
servents which choose not to implement these features, or other 
Gnutella-extension proposals.
</p>
<p>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
"OPTIONAL" in the rest of this document are to be interpreted as 
described in RFC 2119.
</p>
<a name="rfc.section.2.2"></a><h4><a name="anchor4">2.2</a>&nbsp;Status of this Document</h4>

<p> A number of commercial and non-commercial clients have expressed
support for and substantially implemented this specification's sections
from <a href="#hash_and_urn_conventions">Hash and URN Conventions</a> through <a href="#download_extensions">Download Extensions</a>. These sections of the specification 
have received wide support in discussions and informal polls among 
Gnutella developers, but this specification as a whole has not yet 
passed through any formal GDF ratification procedure.
</p>
<p><a href="#huge_in_ggep">Experimental: HUGE in GGEP</a> is an
experimental recommendation for how HUGE capabilities 
could be communicated in the <a href="#refs.ggep">GGEP</a>[1] style. This approach is offered as grounds 
for discussion and trial implementations of GGEP, if desired.
It should not be considered a reflection of a consensus, 
prevailing practice, or an imminent replacement of the
functioning and deployed hash/URN sharing mechanisms described
in the rest of this document.
</p>
<p>In addition to a number of minor corrections and clarifications, 
the major changes in this version of the HUGE specification are:


<ul class="text">
<li>Recognition of the prevailing practice of supplying URNs even
    when not explicitly requested (<a href="#query_extensions">Query Extensions</a>
    and <a href="#queryhit_extensions">QueryHit Extensions</a>).
</li>
<li>Specification of the W3C's ISO8601 date-time format as the required
    format for optional alternate-location timestamping.  (<a href="#x_gnutella_alternate_location">X-Gnutella-Alternate-Location</a>).
</li>
<li>Discussion of coexistence of HUGE extension strings and GGEP
    (<a href="#huge_gem">HUGE General Extension Mechanism (GEM)</a>) and an experimental HUGE-inside-GGEP
    recommendation (<a href="#huge_in_ggep">Experimental: HUGE in GGEP</a>).
</li>
</ul><p>
</p>
<a name="rfc.section.2.3"></a><h4><a name="hash_and_urn_conventions">2.3</a>&nbsp;Hash and URN Conventions</h4>

<p>URN syntax was originally defined in <a href="#RFC2141">RFC2141</a>[2]; a 
procedure for registering URN namespaces is described in <a href="#RFC2611">RFC2611</a>[3]. URNs follow the general syntax:
</p></font><pre>
  urn:[Namespace-ID]:[Namespace-Specific-String]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>All examples in this version of this document presume the
Namespace-ID "sha1", which is not yet officially registered,
and a Namespace-Specific-String which is a 32-character 
Base32-encoding of a 20-byte SHA1 hash value. For example:
</p></font><pre>
  urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Case is unimportant for these identifiers, although other
URN-schemes will sometimes have case-sensitive Namespace-Specific-Strings.
Formal documentation and registration of this namespace and
encoding will proceed in separate documents, and this document
will be updated with references when possible. The Base32
encoding to be used is the one described as "Canonical" in the Simon
Josefsson-editted Internet-Draft, "Base Encodings" 
<a href="#I-D.josefsson-base-encoding">[4]</a>. However, the encoded
output should not include any stray intervening characters or 
end-padding.
</p>
<p>A nutshell description of how to calculate such Base32 
encodings from binary data is:


<ul class="text">
<li>Take bits in groups of 5, most-significant-bits first.
</li>
<li>Append zeroes if necessary to pad the last group to 5 bits.
</li>
<li>Replace each group with the corresponding value from the
    following digit-set, which leaves out the digits [0,1], for 
    5-bit values 0 through 31:
 </p>
</font><pre>
    ABCDEFGHIJKLMNOPQRSTUVWXYZ  234567
 </pre><font face="verdana, helvetica, arial, sans-serif" size="2">
<p>

</li>
</ul><p>
</p>
<p>For example, taking the two bytes 0x0F 0xF5:
</p></font><pre>
  00001111 11110101 -> 00001 11111 11010 1[0000] -> B72Q (Base32)
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Another related URN Namespace which will be mentioned is
that of "urn:bitprint". This namespace, also pending formal
documentation and registration, features a 32-character SHA1
value, a connecting period, then a 39-character TigerTree 
value. This creates an identifier which is likely to remain
robust against intentional manipulation further into the future 
than SHA1 alone, and offers other benefits for subrange 
verification. 
</p>
<p>Any "bitprint" identifier which begins with 32 characters
terminated by a period can be converted to a "sha1" 
value by truncating its Namespace-Specific-String to the
first 32-characters. That is,
</p></font><pre>
  urn:bitprint:[32-character-SHA1].[39-character-TigerTree]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>...can become...
</p></font><pre>
  urn:sha1:[32-character-SHA1]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>All servents compliant with this specification MUST be 
capable of calculating and reporting SHA1 values when
appropriate. Further, servents which choose not to calculate 
extended "urn:bitprint" values SHOULD down-convert such
values and requests, whenever received, to SHA1 values and
requests.
</p>
<a name="rfc.section.2.4"></a><h4><a name="anchor5">2.4</a>&nbsp;Gnutella Version</h4>

<p>HUGE is designed as an extension to the Gnutella Protocol
version 0.4, as documented by <a href="#refs.clip2">Clip2, 
revision 1.2</a>[5]. That document was
available as a PDF on 2002-04-30 from the Clip2 website:
</p></font><pre>
  http://www.clip2.com/GnutellaProtocol04.pdf
  urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>The HUGE extensions are completely independent of, and
thus perfectly compatible with, the Gnutella version 0.6 
capability-negotiation handshake.
</p>
<a name="huge_gem"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.3"></a><h3>3.&nbsp;HUGE General Extension Mechanism (GEM)</h3>

<p>At its heart, HUGE requires that new, distinct information
be included in Query messages and the QueryHit responses.
The general mechanism used is to insert additional strings
"between the nulls" -- the paired NULL characters which
appear in Gnutella messages at end of Query search-strings
and QueryHit results.
</p>
<p>However, numerous potential Gnutella extensions might all
wish to use that same space, even at the same time. Thus
a facility is required to segment and distinguish independent
extensions. This section describes one such facility, the
HUGE "General Extension Mechanism" (GEM).
</p>
<p>Servents compliant with this proposal MUST be able to interpret 
the space between NULs in Queries and QueryHit results as zero or
more independent extension strings, separated by ASCII character 
28 -- FS, "file separator", 0x1C. (This character will not appear 
in any human-readable strings, and is also expressly illegal in 
XML.) As many extension strings as will fit inside a legal
Gnutella message are allowed.
</p>
<p>Any future document specifying the format and behavior
of certain extension strings MUST provide a clear rule for 
identifying which strings are covered by its specification, 
based on one or more unique prefixes. Servents MUST ignore 
any individual extension strings they do not understand.
</p>
<p>Any extension strings beginning with "urn:" (case-insensitive)
MUST be interpreted as per this specification. Future extensions
using this GEM approach SHOULD NOT introduce ambiguities as to 
the interpretation of any given previously-documented extension 
string, and thus SHOULD NOT claim to cover any prefixes which are 
substrings or extensions of "urn:". (For example, "u", "ur", "urn", 
"urn:blah", etc.)
</p>
<p>So, a Query with two extension strings would fit the following 
general format:
</p></font><pre>
  QUERY:
    STD-HEADER: 
     [23 bytes]
    QUERY-SEARCH-STRING: 
     traditional search string[0x00]
    EXTRA
     extension1[0x1C]extension2[0x00]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>A QueryHit with two extension strings would look like:
</p></font><pre>
  QUERYHIT:
    STD-HEADER:
     [23 bytes] 
    QUERY-HIT-HEADER:
     [11 bytes]
    EACH-RESULT:
     INDEX:    
      [4 bytes]
     LEN:
      [4 bytes]
     FILENAME:
      Filename[0x00]
     EXTRA:
      extension1[0x1C]extension2[0x00]
    SERVENT-IDENTIFIER:
    [16 bytes]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Since the original version of this document appeared, the 
"Gnutella Generic Extension Protocol", or <a href="#refs.ggep">GGEP</a>[1], has gained wide
support as a general way to include labelled extension fields 
in every kind of Gnutella message, not just Queries and 
QueryHits. At the time of this writing, the GGEP specification 
is at document revision 0.51. That specification's method of
separating and labelling extensions differs from HUGE GEM, 
but its Appendix B, "Peaceful Coexistence", recommends a workable 
strategy for disambiguating HUGE GEM strings from GGEP extension 
blocks. Servents implementing both HUGE and GEM MUST follow
those recommendations, and servents implementing just HUGE
MUST consider any apparent extension string which begins with 
the GGEP magic number byte, 0xC3, as being the start of a data 
area not described to this HUGE GEM specification.
</p>
<p>The availability of GGEP, and its ability to coexist 
with deployed HUGE hash/URN GEM strings, makes it very possible 
that no further GEM-style extensions will be defined in the
future.
</p>
<p>(<a href="#huge_in_ggep">Experimental: HUGE in GGEP</a> of this specification 
describes an experimental 
embedding of the HUGE data inside GGEP-formatted extension blocks. 
Servent developers who are including GGEP functionality MAY wish 
to implement this embedding as a GGEP practice case, or as a 
step towards a potential future with a uniform extension 
mechanism. However, to ensure the widest compatibility with working
and deployed code, servents MUST also retain the ability
to issue and respond to HUGE GEM style extension strings to
be compliant with this version of the HUGE specification.)
</p>
<a name="query_extensions"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.4"></a><h3>4.&nbsp;Query Extensions</h3>

<p>HUGE adds two new Query capabilities: the ability to request 
that URNs be included on returned search results, and the 
ability to Query-by-URN.
</p>
<p>To explicitly request that URNs be attached to search results, 
servents MUST include either the generic string "urn:" or 
namespace-specific URN prefixes, such as "urn:sha1:", as Query
GEM extension strings. 

</p>
<p>For example:
</p></font><pre>
  QUERY:
    STD-HEADER: 
     [23 bytes]
    QUERY-SEARCH-STRING: 
     Gnutella Protocol[0x00]urn:[0x00]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Servents MAY request multiple specific URN types, but use 
of the generic "urn:" is recommended unless a servent has
special requirements.
</p>
<p>When answering a Query which includes such URN requests,
a remote servent SHOULD include any URNs it can provide that
meet the request. In the generic "urn:" case, this means
one or more URNs of the responder's choosing. When specific
namespaces like "urn:sha1:" are requested, those URNs should
be provided if possible. A servent MUST still return 
otherwise-valid hits, even if it cannot supply requested
URNs.
</p>
<p>A servent MAY include URNs on Query answers even 
when URNs have not been specifically requrested.
</p>
<p>To search for a file with a specific URN, servents MUST
include the whole URN as a Query GEM extension string. Servents may 
include multiple URNs as separate extension strings, and/or 
include a non-empty traditional search string. Any Query for
a specific URN is also an implicit request that the same sort
of URN appear on all search results.
</p>
<p>For example:
</p></font><pre>
  QUERY:
    STD-HEADER:
     [23 bytes]
    QUERY-SEARCH-STRING:
     [0x00]urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB[0x00]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>When answering a Query message, a servent SHOULD return any 
file matching any of the included URNs, or matching the traditional
search string, if present. (That is, any Query message is a request
for files matching the traditional query-string, if present, OR any
one or more of the supplied URNs, if present.)
</p>
<a name="queryhit_extensions"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.5"></a><h3>5.&nbsp;QueryHit Extensions</h3>

<p>When providing URNs on QueryHit results, either because the Query
requested URNs or because you choose to provide URNs by default,
place the URNs as a GEM extension string or strings inside each
individual result.
</p>
<p>For example:
</p></font><pre>
  QUERYHIT:
    STD-HEADER:
     [23 bytes] 
    QUERY-HIT-HEADER:
     [11 bytes]
    EACH-RESULT:
     INDEX:    
      [4 bytes]
     LEN:
      [4 bytes]
     FILENAME:
      GnutellaProtocol04.pdf[0x00]
     EXTRA:
      urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB[0x00]
    SERVENT-IDENTIFIER:
    [16 bytes]
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<a name="download_extensions"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.6"></a><h3>6.&nbsp;Download Extensions</h3>

<a name="rfc.section.6.1"></a><h4><a name="request-uri">6.1</a>&nbsp;URN-based Request-URI</h4>

<p>Servents which report URNs MUST support a new syntax
for requesting files, based on their URN rather than 
their filename and local "file index". This syntax is 
adopted from <a href="#RFC2169">RFC2169</a>[6].
</p>
<p>Traditional Gnutella GETs are of the form:
</p></font><pre>
  GET /get/[file-index]/[file-name] HTTP/1.0
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>Servents reporting URNs must also accept requests of the form:
</p></font><pre>
  GET /uri-res/N2R?[URN] HTTP/1.0
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>For example:
</p></font><pre>
  GET /uri-res/N2R?urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB HTTP/1.0
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>(The PUSH/GIV facilities are unaffected by the HUGE extensions.)
</p>
<a name="rfc.section.6.2"></a><h4><a name="anchor6">6.2</a>&nbsp;Headers</h4>

<p>Two new headers, for inclusion on HTTP requests and responses, 
are defined to assist servents in ascertaining that certain files
are exact duplicates of each other, and in finding alternate 
locations for identical files.
</p>
<a name="rfc.section.6.2.1"></a><h4><a name="anchor7">6.2.1</a>&nbsp;X-Gnutella-Content-URN</h4>

<p>When responding to any GET, servents compliant with
this specification SHOULD use the "X-Gnutella-Content-URN" 
header whenever possible to report a reliable URN for the 
file they are providing (or in some cases, the file they 
recognize is being requested but that cannot currently be 
provided). The URN MUST be for the full file, 
even when responding to "Range" requests.
</p>
<p>For example:
</p></font><pre>
  X-Gnutella-Content-URN: urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>When initiating a GET, servents MAY use the
"X-Gnutella-Content-URN" header to indicate the
URN of the content they are attempting to retrieve,
regardless of the Request-URI used. If the responder
is certain that the given URN does not apply to the
resource it would otherwise return, it may respond
with a 404 Not Found error.
</p>
<p>Multiple comma-separated URNs MAY be supplied in the
"X-Gnutella-Content-URN" header, if they are all valid
URNs for the same file. As per the HTTP header rules
(<a href="#RFC2616">RFC2616</a>[7], section 4.2), each
value in this list may also be equivalently reported
as multiple headers with the same "X-Gnutella-Content-URN"
field-name.
</p>
<a name="rfc.section.6.2.2"></a><h4><a name="x_gnutella_alternate_location">6.2.2</a>&nbsp;X-Gnutella-Alternate-Location</h4>

<p>This header only has a defined meaning when used 
in conjunction with "X-Gnutella-Content-URN".
Servents SHOULD use this header to suggest, either in 
responses OR requests, a list of other locations at 
which a file with same URN may be found.
</p>
<p>Each alternate-location given must include at least a
full URL from which the file may be retrieved.
</p>
<p>After this full URL, separated by at least one white space, 
a date and time MAY be supplied, indicating when that location 
was last known to be valid (i.e. used for a successful fetch 
of any sort). The date and time MUST be supplied in the date-time 
format given by the <a href="#refs.w3c-iso8601">W3C's profile 
of ISO8601</a>[8]:
</p>
<p>http://www.w3.org/TR/NOTE-datetime
</p>
<p>This header MAY include multiple alternate locations
(URLs with optional timestamps), separated by commas. As
per the HTTP header rules (<a href="#RFC2616">RFC2616</a>[7],
section 4.2), this comma-separated
list may also be equivalently represented as multiple occurences 
of a message-header with the same "X-Gnutella-Alternate-Location" 
field-name. As per the HTTP header-folding rules (<a href="#RFC2616">RFC2616</a>[7], section 2.2),
a header value may span multiple lines if subsequent lines 
begin with a space or horizontal tab.
</p>
<p>This header MAY be provided on "not found" and "busy"
responses, when it is possible to suggest other locations
more likely to yield success. 
</p>
<p>For example:
</p></font><pre>
  X-Gnutella-Content-URN: urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB
  X-Gnutella-Alternate-Location: 
   http://www.clip2.com/GnutellaProtocol04.pdf
  X-Gnutella-Alternate-Location:
   http://10.0.0.10:6346/get/2468/GnutellaProtocol04.pdf
  X-Gnutella-Alternate-Location: 
   http://10.0.0.25:6346/uri-res/N2R?urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB 
   2002-04-30T08:30Z
</pre><font face="verdana, helvetica, arial, sans-serif" size="2">

<p>This indicates 3 known potential alternate sources for the
same file, with only the third bearing a known-valid timestamp.
</p>
<p>Note that even places which already have a file may learn
of new alternate locations on inbound requests.
</p>
<p>If the "X-Gnutella-Alternate-Location" header is encountered
without a corresponding "X-Gnutella-Content-URN" header, then its
meaning is undefined by this specification, and it will likely be
appropriate to double-check the appropriateness of any locations
so provided.
</p>
<p>Implementations SHOULD be tolerant of additional whitespace-separated
tokens after each alternate-location, gracefully ignoring values
that are not understood, since  future revisions of this 
alternate-location mechanism may tag locations with additional 
information.
</p>
<a name="anchor8"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.7"></a><h3>7.&nbsp;Implementation Recommendations</h3>

<p>While full compliance with this document is recommended,
functionality can be adopted in stages, without adversely
affecting other servents. In particular, the facilities of
this document can be addressed according to the following
logical ordering:


<ol class="text">
<li>Accept extension strings, gracefully ignoring unknown 
extensions, passing along even traditionally "empty" Query 
messages if they have extensions. With these steps, HUGE 
traffic will not cause any degradation in normal behavior.
</li>
<li>Report URNs and accept URN GETs, and use the Content-URN 
header. After these steps, remote servents can begin to improve 
their downloading features, even before making any changes
to search features.
</li>
<li>Request URNs on generated Query messages, so that local
downloading behavior can be improved.
</li>
<li>Remember -- and share -- alternate-locations via headers. 
At this stage, even normal downloading activity helps build 
redundant source-meshes.
</li>
<li>Generate exact URN Queries for local needs -- for example,
safe resuming -- or in reaction to user choices  -- such 
as clicks inside file-listings or web-pages. After this
step, servents will be able to safely resume downloads,
even days after they began, or give users the ability to
request exact files.
</li>
</ol><p>
</p>
<a name="huge_in_ggep"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.8"></a><h3>8.&nbsp;Experimental: HUGE in GGEP</h3>

<p>Servent developers who are adopting GGEP support may
find it helpful to consider the following recommendations
for communicating HUGE hash/URN information as GGEP 
extensions
</p>
<p>This approach is offered as grounds for discussion and 
trial implementations in GGEP, if desired. It should not be 
considered a reflection of a consensus, of prevailing practices, 
or as an indication that the functioning and deployed hash/URN 
sharing mechanisms described in the rest of this document
will be replaced anytime soon.
</p>
<p>The proposed one-character GGEP extension-identifier for
HUGE info is 'u'. This can be thought of as an abbrieviation
of "urn:", as this GGEP extension-identifier takes the place 
of the "urn:" prefix which identifies every HUGE GEM extension
string. Note that this proposed identifier assignment has not 
been approved by the GDF.
</p>
<p>Every place you would use a HUGE GEM string, use a HUGE
GGEP block instead. As the GGEP extension data, use the 
same string as would have been used in HUGE GEM, without the
(now redundant) leading "urn:" part. When you receive such
strings, assume the implied "urn:" was present, to create
legally formatted URNs whenever necessary.
</p>
<p>Examples:


<ul class="text">
<li>If you were going to attach the GEM extension string "urn:" 
to a Query, to make a blanket request for URNs on responses,
instead attach a GGEP block of type 'u' with a zero-length 
payload.
</li>
<li>If you were going to attach the GEM extension string
"urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB" to a Query,
to search for an exact file, instead attach a GGEP block of
type 'u' with payload "sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB".
</li>
<li>If you were going to attach the GEM extension string
"urn:sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB" to a QueryHit 
response, to report an  exact file URN, instead attach a GGEP 
block to the response of type 'u' with payload 
"sha1:PLSTHIPQGSSZTS5FJUPAKUZWUGYQYPFB".
</li>
</ul><p>
</p>
<p>This approach maximizes the similarity between the HUGE
GEM and GGEP encapsulations, preserving the capability for
'u' extensions to include new labelled URN-types in the 
future.
</p>
<p>The current  deployment of working HUGE GEM code means that
even if HUGE-in-GGEP becomes popular, most servents for the 
forseeable future will still want to (1) emit GEM-style Queries 
and (2) be able to reply to GEM-style Queries with GEM-style 
QueryHits. However, adding a latent ability to respond to 
GGEP-style queries would lay the groundwork for a potential
future switchover to pure HUGE-in-GGEP, if that ever becomes 
necessary or desirable.
</p>
<a name="anchor9"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<a name="rfc.section.9"></a><h3>9.&nbsp;Acknowledgements</h3>

<p>Thanks go to Robert Kaye, Mike Linksvayer, Oscar Boykin, 
Justin Chapweske, Tony Kimball, Greg Bildson, Lucas Gonze,
Raphael Manfredi, Tor Klingberg and all discussion participants 
in the Gnutella Developer Forum for their contributions, ideas, 
and comments which helped shape and improve this proposal.
</p>
<a name="rfc.references1"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<h3>References</h3>
<table width="99%" border="0">
<tr><td class="author-text" valign="top"><b><a name="refs.ggep">[1]</a></b></td>
<td class="author-text">Thomas, J., "<a href="http://groups.yahoo.com/group/the_gdf/files/Proposals/GGEP/GnutellaGenericExtensionProtocol.0.51.html">Gnutella Generic Extension Protocol (GGEP)</a>", February 2002.</td></tr>
<tr><td class="author-text" valign="top"><b><a name="RFC2141">[2]</a></b></td>
<td class="author-text"><a href="mailto:jayhawk@ds.internic.net">Moats, R.</a>, "<a href="ftp://ftp.isi.edu/in-notes/rfc2141.txt">URN Syntax</a>", RFC 2141, May 1997.</td></tr>
<tr><td class="author-text" valign="top"><b><a name="RFC2611">[3]</a></b></td>
<td class="author-text"><a href="mailto:leslie@thinkingcat.com">Daigle, L.</a>, <a href="mailto:Dirk.vanGulik@jrc.it">van Gulik, D.</a>, <a href="mailto:renato@dstc.edu.au">Iannella, R.</a> and <a href="mailto:paf@swip.net">P. Faltstrom</a>, "<a href="ftp://ftp.isi.edu/in-notes/rfc2611.txt">URN Namespace Definition Mechanisms</a>", BCP 33, RFC 2611, June 1999.</td></tr>
<tr><td class="author-text" valign="top"><b><a name="I-D.josefsson-base-encoding">[4]</a></b></td>
<td class="author-text">Josefsson, S., "<a href="http://www.ietf.org/internet-drafts/draft-josefsson-base-encoding-03.txt">Base Encodings</a>", draft-josefsson-base-encoding-03 (work in progress), November 2001.</td></tr>
<tr><td class="author-text" valign="top"><b><a name="refs.clip2">[5]</a></b></td>
<td class="author-text">Clip2, "<a href="http://www.clip2.com/GnutellaProtocol04.pdf">The Gnutella Protocol Specification v0.4, Document Revision 1.2</a>".</td></tr>
<tr><td class="author-text" valign="top"><b><a name="RFC2169">[6]</a></b></td>
<td class="author-text"><a href="mailto:rdaniel@lanl.gov">Daniel, R.</a>, "<a href="ftp://ftp.isi.edu/in-notes/rfc2169.txt">A Trivial Convention for using HTTP in URN Resolution</a>", RFC 2169, June 1997.</td></tr>
<tr><td class="author-text" valign="top"><b><a name="RFC2616">[7]</a></b></td>
<td class="author-text"><a href="mailto:fielding@ics.uci.edu">Fielding, R.</a>, <a href="mailto:jg@w3.org">Gettys, J.</a>, <a href="mailto:mogul@wrl.dec.com">Mogul, J.</a>, <a href="mailto:frystyk@w3.org">Nielsen, H.</a>, <a href="mailto:masinter@parc.xerox.com">Masinter, L.</a>, <a href="mailto:paulle@microsoft.com">Leach, P.</a> and <a href="mailto:timbl@w3.org">T. Berners-Lee</a>, "<a href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">Hypertext Transfer Protocol -- HTTP/1.1</a>", RFC 2616, June 1999.</td></tr>
<tr><td class="author-text" valign="top"><b><a name="refs.w3c-iso8601">[8]</a></b></td>
<td class="author-text">Wolf, M. and C. Wicksteed, "<a href="http://www.w3.org/TR/NOTE-datetime">W3C Note on Date and Time Formats</a>", September 1997.</td></tr>
</table>

<a name="rfc.authors"><br><hr size="1" shade="0"></a>
<table border="0" cellpadding="0" cellspacing="2" width="30" height="15" align="right"><tr><td bgcolor="#990000" align="center" width="30" height="15"><a href="#toc" CLASS="link2"><font face="monaco, MS Sans Serif" color="#ffffff" size="1"><b>&nbsp;TOC&nbsp;</b></font></a><br></td></tr></table>
<h3>Author's Address</h3>
<table width="99%" border="0" cellpadding="0" cellspacing="0">
<tr><td class="author-text">&nbsp;</td>
<td class="author-text">Gordon Mohr</td></tr>
<tr><td class="author-text">&nbsp;</td>
<td class="author-text">Bitzi, Inc.</td></tr>
<tr><td class="author" align="right">EMail:&nbsp;</td>
<td class="author-text"><a href="mailto:gojomo@bitzi.com">gojomo@bitzi.com</a></td></tr>
<tr><td class="author" align="right">URI:&nbsp;</td>
<td class="author-text"><a href="http://bitzi.com/">http://bitzi.com/</a></td></tr>
</table>
</font></body></html>

